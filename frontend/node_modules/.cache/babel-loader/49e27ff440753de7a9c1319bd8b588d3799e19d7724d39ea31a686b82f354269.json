{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\spang\\\\Desktop\\\\my-app\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function EventsPage() {\n  _s();\n  const data = useLoaderData();\n  if (data.isError) {}\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport async function loader() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    throw new Response(json.stringify({\n      message: \"Couldnt fetch data!\"\n    }, {}));\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","data","isError","events","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","response","fetch","ok","Response","json","stringify","message","$RefreshReg$"],"sources":["C:/Users/spang/Desktop/my-app/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData } from \"react-router-dom\";\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nexport function EventsPage() {\r\n  const data = useLoaderData();\r\n  if (data.isError) {\r\n  }\r\n  const events = data.events;\r\n  return (\r\n    <>\r\n      <EventsList events={events} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport async function loader() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  if (!response.ok) {\r\n    throw new Response(json.stringify({message: \"Couldnt fetch data!\"}, {}));\r\n  } else {\r\n    return response;\r\n  }\r\n}\r\n"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,OAAO,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAC3B,MAAMC,IAAI,GAAGR,aAAa,CAAC,CAAC;EAC5B,IAAIQ,IAAI,CAACC,OAAO,EAAE,CAClB;EACA,MAAMC,MAAM,GAAGF,IAAI,CAACE,MAAM;EAC1B,oBACEP,OAAA,CAAAE,SAAA;IAAAM,QAAA,eACER,OAAA,CAACF,UAAU;MAACS,MAAM,EAAEA;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAC9B,CAAC;AAEP;AAACR,EAAA,CAVeD,UAAU;EAAA,QACXN,aAAa;AAAA;AAAAgB,EAAA,GADZV,UAAU;AAY1B,OAAO,eAAeW,MAAMA,CAAA,EAAG;EAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAACC,OAAO,EAAE;IAAqB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EAC1E,CAAC,MAAM;IACL,OAAON,QAAQ;EACjB;AACF;AAAC,IAAAF,EAAA;AAAAS,YAAA,CAAAT,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}